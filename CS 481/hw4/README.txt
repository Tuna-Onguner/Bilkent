Bilkent University
Semester of Spring 2025
Department of Computer Engineering
CS481 Bioinformatics Algorithms
Homework Assignment #4

Author:
Deniz Tuna ONGUNER
Bilkent ID: 22001788

Section: 1
Instructor: Can ALKAN

Date: 1 May 2025

Encoding: UTF-8
Language: Python
Recommended Python Interpreter: 3.12.4
Required Minimum Python Interpreter: 3.10.2

How to Run the Code:
This assigment includes multiple Python scripts where the main script is `hw4.py`,
    which serves as the entry point for executing the program.

Prerequisites:
Ensure you have at least Python 3.10.2 installed. You can check your version using:
```sh
python --version
```

Running the Code:
To run the main script, use the Makefile provided. The commands are as follows:

- Run the program with arguments:
  ```sh
  make RUN ARGS="[-h] -i INPUT_FILEPATH -t OUTPUT_FILEPATH -s MATCH MISMATCH GAP"
  ```

  Replace `INPUT_FILEPATH` with the path to your input file, `OUTPUT_FILEPATH` with the desired output file path,
  and `MATCH`, `MISMATCH`, `OPENING`, and `GAP` with your scoring parameters. Set -h to show the help message.

  Example usage:
  ```sh
  make RUN ARGS="-i input.fasta -t output.txt -s 1 -1 -1"
  ```

- Show a message about Python not being compiled:
  ```sh
  make COMPILE
  ```
  This command is included because it is demanded in the assignment document,
  but Python is an interpreted language and does not require compilation;
  hence, it just prints a message and serves as a placeholder.


- Clean cache files:
  ```sh
  make CLEAN
  ```
  This command removes cache files generated by Python, i.e. `__pycache__`, `.pyc`, and `.pyo` files.


- Clean all output files:
  ```sh
  make CLEANALL
  ```
  This command removes all cache files and output files, i.e. `.txt` files, except for the `README.txt` file.


- Show the help message:
  ```sh
  make HELP
  ```

Explanation of the Makefile:
The provided `Makefile` automates the execution of the program. Below is a breakdown of its functionalities:

- Detects the appropriate Python command (`python3.12`, `python3.11`, or `python3.10`) based on the installed versions.
- Defines the main script (`hw4.py`) and its arguments.
- Provides targets:
  - `ALL`: Runs the default execution.
  - `COMPILE`: Placeholder target (since Python is interpreted, not compiled).
  - `RUN`: Executes `hw4.py` with provided arguments.
  - `CLEAN`: Removes cache files (`__pycache__`, `.pyc`, `.pyo`).
  - `CLEANALL`: Removes cache files and output files, i.e. `.txt` files, except for the `README.txt` file.
  - `HELP`: Displays usage instructions.

Files in the Assignment:
- `hw4.py` - Entry point of the program, parse command-line arguments and handles file I/O.
- `needleman_wunsch.py` - Contains the implementation of the Needleman-Wunsch algorithm for global sequence alignment.
- `UPGMA.py` - Contains the implementation of the UPGMA algorithm for phylogenetic tree construction.

Libraries Used:
- `argparse` - For parsing command-line arguments.
- `os` - For file and directory operations.
- `itertools` - 'combinations' function is used for generating combinations of sequences.
- `collections` - 'defaultdict' data structure is used for the distance matrix.

References:
In addition to the course slides, following GitHub repositories are applied for the implementation of UPGMA, Newick format, and Needleman-Wunsch algorithm:
- thaze, BioInformatics – concise UPGMA prototype in plain Python, GitHub repository, https://github.com/thaze/BioInformatics [accessed 30 Apr 2025]
- aeyc, UPGMA – example coupling of Needleman-Wunsch with UPGMA and Newick output, GitHub repository, https://github.com/aeyc/UPGMA [accessed 30 Apr 2025]
- lex8erna, UPGMApy – clear exposition of the average-linkage distance-update rule, GitHub repository, https://github.com/lex8erna/UPGMApy [accessed 30 Apr 2025]
- ATalhaTimur, Needleman-Wunsch-Algorithm - Needleman-Wunsch-Algorithm, GitHub repository, https://github.com/ATalhaTimur/Needleman-Wunsch-Algorithm [accessed 30 Apr 2025]

The following webpage is applied for newick format during the implementation:
- J. Felsenstein, “The Newick tree format,” PHYLIP Web Pages, https://phylipweb.github.io/phylip/newicktree.html [accessed 1 May 2025]

The following paper is applied for the implementation of the Needleman-Wunsch algorithm:
- Needleman, S. B., & Wunsch, C. D. (1970). A general method applicable to the search for similarities in the
        amino acid pattern of two proteins. Journal of Molecular Biology, 48(3), 443–453.
        https://doi.org/10.1016/0022-2836(70)90057-4
