Bilkent University Semester of Spring 2025Department of Computer Engineering
CS481 Bioinformatics AlgorithmsHomework Assignment #2: Pattern Alignment

Author
Deniz Tuna ONGUNER  
Bilkent ID: 22001788  

Date
13.03.2025 (DD.MM.YYYY)

Section & Instructor
Section: 1  
Instructor: Can ALKAN  

Encoding & Language
Encoding: UTF-8  
Language: Python  
Recommended Python Interpreter: 3.12.4  
Required Minimum Python Interpreter: 3.10.0

Aim of the Project
The objective of this project is to study DNA pattern alignment, focusing on both global and local alignment algorithms,
needleman-wunsch and smith-waterman, respectively. The project aims to implement these algorithms in Python and analyze the results.

How to Run the Code
This project includes multiple Python scripts that implement pattern alignment algorithms. The main script to execute is `main.py`.

Prerequisites
Ensure you have at least Python 3.10.0 installed. You can check your version using:
```sh
python --version
```

Running the Code
To run the main script, use the Makefile provided. The commands are as follows:

- Run the script with arguments:
  ```sh
  make RUN ARGS=" [-h] (-l | -g) -p SEQUENCES_FILEPATH -t TEXTS_FILEPATH -o OUTPUT_FILEPATH -s MATCH MISMATCH GAP "
  ```
  Set either `-l` for local alignment or `-g` for global alignment.
  Replace `SEQUENCES_FILEPATH`, `TEXTS_FILEPATH`, `OUTPUT_FILEPATH`, `MATCH`, `MISMATCH`, and `GAP` with the appropriate values.
  Example usages:
  ```sh
  make RUN ARGS="-l -p ./patterns.fatsa -t ./texts.fasta -o output.txt -s 1 -1 -2"
  ```

- Show a message about Python not being compiled:
  ```sh
  make COMPILE
  ```
  This command is included because it is demanded in the assignment document, but Python is an interpreted language and does not require compilation; hence, it just prints a message and serves as a placeholder.

- Clean cache files:
  ```sh
  make CLEAN
  ```
  This command removes cache files generated by Python, i.e. `__pycache__`, `.pyc`, and `.pyo` files.

- Show the help message:
  ```sh
  make HELP
  ```

Explanation of the Makefile
The provided `Makefile` automates the execution of the Python script. Below is a breakdown of its functionalities:

- Detects the appropriate Python command (`python3.12`, `python3.11`, or `python3.10`) based on the installed versions.
- Defines the main script (`main.py`) and optional arguments
- Provides targets:
  - `ALL`: Runs the default execution.
  - `COMPILE`: Placeholder target (since Python is interpreted, not compiled).
  - `RUN`: Executes `main.py` with optional arguments.
  - `CLEAN`: Removes cache files (`__pycache__`, `.pyc`, `.pyo`).
  - `HELP`: Displays usage instructions.

Files in the Project
- `main.py` - Entry point of the program.
- `global_alignment.py` - Implements the Needleman-Wunsch algorithm for global alignment.
- `local_alignment.py` - Implements the Smith-Waterman algorithm for local alignment.

Libraries Used
- argparse - For parsing command-line arguments.
- os - For file operations.
- enum - For defining enumeration classes for alignment types.
- re - For regular expression operations, used to find maximum overlap in global alignment.
- multiprocessing - For parallelizing the local alignment algorithm.

References
Local Alignment
- Original Paper: Smith, T. F., & Waterman, M. S. (1981). Identification of common molecular subpatterns. Journal of Molecular Biology, 147(1), 195–197.  
  [DOI: 10.1016/0022-2836(81)90087-5](https://doi.org/10.1016/0022-2836(81)90087-5)
- GitHub Repository Applied: Slavina, A. (2020). Smith-Waterman-Algorithm  
  https://github.com/slavianap/Smith-Waterman-Algorithm

Global Alignment
- Original Paper: Needleman, S. B., & Wunsch, C. D. (1970). A general method applicable to the search for similarities in the amino acid pattern of two proteins. Journal of Molecular Biology, 48(3), 443–453.  
  [DOI: 10.1016/0022-2836(70)90057-4](https://doi.org/10.1016/0022-2836(70)90057-4)
- GitHub Repository Applied: ATalhaTimur. (2024). Needleman-Wunsch-Algorithm  
  https://github.com/ATalhaTimur/Needleman-Wunsch-Algorithm

CIGAR and MD:Z String Representations
In addition to the ones given in the assignment document, the following resources were used to understand the CIGAR and MD:Z string representations:
- CIGAR string explanation: USEARCH. (n.d.). https://www.drive5.com/usearch/manual/cigar.html
- MD:Z String representation: ChatGPT. (2025, March 9). Explanation of the MD:Z string representation in DNA and protein alignments. OpenAI.
  Complete Conversation Link: https://chatgpt.com/share/67cd890d-5f04-8002-873d-64a3d8d7a1a4
